xterm*vt100.Translations: #override \
/* these key combinations normally don't send anything */\
 Ctrl ~Shift <Key>2: string("\033[27;5;50~") \n\
 Ctrl ~Shift <Key>3: string("\033[27;5;51~") \n\
 Ctrl ~Shift <Key>4: string("\033[27;5;52~") \n\
 Ctrl ~Shift <Key>5: string("\033[27;5;53~") \n\
 Ctrl ~Shift <Key>7: string("\033[27;5;55~") \n\
 Ctrl ~Shift <Key>8: string("\033[27;5;56~") \n\
 Ctrl  Shift <Key>\\\\: string("\033[27;5;124~") \n\
 Ctrl ~Shift <Key>\\\\: string("\033[27;5;92~") \n\
 Ctrl ~Shift <Key>`: string("\033[27;5;96~") \n\
 Ctrl  Shift <Key>`: string("\033[27;5;126~") \n\
/* these normally ignore shift */\
 Ctrl  Shift <Key>[: string("\033[27;5;123~") \n\
 Ctrl  Shift <Key>]: string("\033[27;5;125~") \n\
 Ctrl ~Shift <Key>6: string("\033[27;5;54~") \n\
 Ctrl  Shift <Key>6: string("\033[27;5;94~") \n\
/* These traditionally send the same key code as another key */
 Ctrl        <Key>i: string("\033[27;5;105~") \n\
 Ctrl ~Shift <Key>[: string("\033[27;5;91~") \n\
/* Usually, pressing enter sends carriage-return (ctrl+m), but some terminals use line-feed (ctrl+j).
 Many programs treat both as an enter press, so we remap both ctrl+j and ctrl+m */\
 Ctrl        <Key>j: string("\033[27;5;106~") \n\
 Ctrl        <Key>m: string("\033[27;5;109~") \n\
/* Normally ctrl+@ (usually ctrl+shift+2) and ctrl+space both send char 0 (written as ^@)
However, because ctrl+space is more convenient, most programs assume ^@ was sent by ctrl+space.
So, i've decided to preserve that, and redefine ctrl+shift+2 instead. */\
 Ctrl  Shift <Key>2: string("\033[27;5;64~") \n\
/* This is similar to ctrl+space and ctrl+@ sending \0, but with ctrl+/ ctrl+_ \037.
However, not all terminals map ctrl+/ to ctrl+_ , so you may need to add this mapping manually. */\
 Ctrl ~Shift <Key>_: string("\033[27;5;95~") \n\
/* Ctrl ~Shift <Key>/: string("\037~") */\

 




